import pyhrv
from spectHR.Tools.Logger import logger

def plot_psd(RTops=None):
    """
    Computes and plots the Power Spectral Density (PSD) for each epoch in the provided RTops DataFrame 
    using the Welch method.

    Parameters:
        RTops (DataFrame): Input DataFrame containing R-top data and IBI values. 
                           Must include columns:
                             - 'epoch': epoch identifiers.
                             - 'ibi': inter-beat interval values.

    Returns:
        matplotlib.figure.Figure: A figure object containing the Welch PSD plots for all epochs.
                                  Plots are generated by grouping data based on 'epoch'.
    """
    # Apply the Welch PSD calculation for each group of 'epoch'
    return RTops.groupby('epoch', group_keys=False)[RTops.columns.tolist()].apply(
        welch_psd, include_groups=True
    )

def welch_psd(RTops=None, mode='dev'):
    """
    Calculates and plots the Welch Power Spectral Density (PSD) for a single epoch.

    Parameters:
        RTops (DataFrame): A DataFrame containing inter-beat interval (IBI) data for a single epoch.
                           Must include:
                             - 'epoch': identifier for the current epoch (first row used for title).
                             - 'ibi': inter-beat interval values used to calculate PSD.
        mode (str, optional): Currently unused, reserved for future functionality. Default is 'dev'.

    Returns:
       Nothing: sets up the plots
    """
    # Extract the epoch name for the title of the plot
    titlestring = RTops['epoch'].iloc[0]
    res = None

    try:
        # Perform Welch PSD analysis on IBI data using the pyhrv library
        res = pyhrv.frequency_domain.welch_psd(RTops['ibi'])
    except Exception as e:
        # Handle any errors gracefully and log them
        logger.error(f"Error computing Welch PSD for epoch '{titlestring}': {e}")
        return None

    if res is not None:
        # Retrieve the Welch PSD plot from the results
        pfig = res['fft_plot']

        # Customize the plot figure size
        pfig.set_figwidth(12)
        pfig.set_figheight(5)

        # Update title and y-axis limits for better readability
        ax = pfig.get_axes()[0]
        ax.set_title(titlestring)  # Add epoch name as title
        ax.set_ylim(0, 0.1)        # Set the y-axis range to [0, 0.1]

 